%Floor Planning with LP
function [ x, y, w, h, Rect_W, Rect_H ] = optimalPlacement( H, V, a )
% OPTIMALPLACEMENT For given horizontal and vertical positional relations
% of rectangles, along with their areas, produces an optimal placement
% that minimizes the circumference of the overall bounding rectangle.

    if size(H,1) ~= size(H,2) || size(H,1) ~= size(V,1) || size(V,1) ~= size(V,2)
        error('H and V must be square matrices with equal dimensions.');
    end
    if size(H,1) ~= length(a)
        error('Length of vector a must be the same as the heigt and width of H and V.');
    end

    n = length(a);

    cvx_begin quiet
        variables x(n) y(n);
        variable w(n) nonnegative;
        variable h(n) nonnegative;
        variable Rect_W nonnegative;
        variable Rect_H nonnegative;
        minimize 2*(Rect_W+Rect_H);
        subject to
            0 <= x <= Rect_W - w;
            0 <= y <= Rect_H - h;
            diag(x)*H + diag(w)*H - H*diag(x) <= 0;
            diag(y)*V + diag(h)*V - V*diag(y) <= 0;
            a .* inv_pos(h) - w <= 0;
    cvx_end
end

%Floor Planning with LP for testing
clear
clc

n = 4;
Amin = [100 100 100 100 ; ...
         20  50  80 150 ; ...
        180  80  80  80 ; ...
         30 150  30 200];

H = [ 0 0 1 0;
      0 0 1 0;
      0 0 0 0;
      0 0 0 0;];

V = [ 0 0 0 1 ;
      1 0 0 0 ;
      0 0 0 1 ;
      0 0 0 0 ;];
  

for iter = 1:4
    a = Amin(iter,:)';
    tic
    [ x, y, w, h, Rect_W, Rect_H ] = optimalPlacement(H,V,a);
    toc
    subplot(2,2,iter)
    for i=1:n
        fill([x(i); x(i)+w(i); x(i)+w(i); x(i)],[y(i);y(i);y(i)+h(i);y(i)+h(i)],0.90*[1 1 1]);
        hold on;
    end
    
    for i=1:n
        t = text(x(i)+w(i)/2, y(i)+h(i)/2,['_',int2str(i)]);
        set(t, 'HorizontalAlignment', 'center');
        set(t, 'VerticalAlignment', 'middle');
        set(t, 'FontWeight', 'bold');
        set(t, 'FontName', 'Cambria');
    end
    axis([0 Rect_W 0 Rect_H]);
    axis equal; axis off;
end


% Floor planning with GP.
% (a figure is generated)

clear
clc
% constants
a = 30;
b = 150;
c = 30;
d = 200;

% GP variables
gpvar wa wb wc wd ha hb hc hd

% objective function is the area of the bounding box
obj = max(wa + wb, wc + wd)*(max(ha,hb) + max(hc,hd));

% constraints (now impose the non-changing constraints)
constr = [ ha*wa == a; hb*wb == b; hc*wc == c; hd*wd == d ];

% set the quiet flag (no solver reporting)
global QUIET; QUIET = 1;

% alpha is the changing parameter
N = 20;
alpha = linspace(1.01,4,N);

min_area = []; status_history = {};
for n = 1:N
  % add constraints that depend on the changing parameter alpha
  constr(5)  = 1/alpha(n) <= ha/wa; constr(6)  = ha/wa <= alpha(n);
  constr(7)  = 1/alpha(n) <= hb/wb; constr(8)  = hb/wb <= alpha(n);
  constr(9)  = 1/alpha(n) <= hc/wc; constr(10) = hc/wc <= alpha(n);
  constr(11) = 1/alpha(n) <= hd/wd; constr(12) = hd/wd <= alpha(n);

  [obj_value, solution, status] = gpsolve(obj, constr);
  min_area(n,1) = obj_value;
  status_history{end+1} = status;
end

% set the quiet flag (no solver reporting)
global QUIET; QUIET = 1;

figure,
plot(alpha,min_area);
xlabel('alpha'); ylabel('min area');
axis([1 4 400 600]);

figure,
fill([0; solution{7,2}(1,1); solution{7,2}(1,1); 0],[0;0;solution{3,2}(1,1);solution{3,2}(1,1)],0.90*[1 1 1]);
hold on;
fill([solution{7,2}(1,1); solution{7,2}(1,1)+solution{8,2}(1,1); solution{7,2}(1,1)+solution{8,2}(1,1); solution{7,2}(1,1)], [0; 0; solution{4,2}(1,1); solution{4,2}(1,1)],0.70*[1 1 1]);
hold on;
fill([0; solution{5,2}(1,1); solution{5,2}(1,1); 0],[solution{3,2}(1,1);solution{3,2}(1,1);solution{3,2}(1,1)+solution{1,2}(1,1);solution{3,2}(1,1)+solution{1,2}(1,1)],0.50*[1 1 1]);
hold on;
fill([solution{5,2}(1,1); solution{5,2}(1,1)+solution{6,2}(1,1); solution{5,2}(1,1)+solution{6,2}(1,1); solution{5,2}(1,1)], [solution{4,2}(1,1); solution{4,2}(1,1); solution{4,2}(1,1)+solution{2,2}(1,1); solution{4,2}(1,1)+solution{2,2}(1,1)],0.30*[1 1 1]);
hold on;
axis([0 solution{5,2}(1,1)+solution{6,2}(1,1) 0 solution{4,2}(1,1)+solution{2,2}(1,1)]);
axis off
